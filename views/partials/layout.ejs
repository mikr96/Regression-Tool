
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Regression Testing Page</title>
  <link rel="shortcut icon" href="#" />
  <link rel="stylesheet" type="text/css" href="../../../css/global.css"/>
  <link rel="stylesheet" type="text/css" href="../../../css/bootstrap.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../../css/sweetalert2.min.css"/>
  <script src="../../../js/jquery-3.4.1.min.js"></script>
  <script src="../../../js/bootstrap.min.js"></script>
  <script src="../../../js/sweetalert2.all.min.js"></script>
  
  <!-- Excel -->
  <script src="../../../js/shim.min.js"></script>
  <script src="../../../js/xlsx.full.min.js"></script>
  <script src="../../../js/FileSaver.js"></script>
  
  <!-- String Algorithm -->
  <script src="../../../js/Jaro-Wrinker.js"></script>
  <script src="../../../js/cosine-similarity.js"></script>
  <script src="../../../js/levenshtein.js"></script>
  <script src="../../../js/trigram.js"></script>

  <!-- Evolutionary Algorithm -->
  <script src="../../../js/GreedyAlgo.js"></script>
  
  <style>
    label {
      display: block;
    }
    .modal   {overflow-y: hidden!important}
  </style>
</head>
<script>

var radioValue, progress = 0
var iteration = 0
const percent = 100
var length = 0
var result = []
var strMatrix = []

async function next() {
  $('#myModal').modal({backdrop: 'static', keyboard: false}) 
  $("#myModal").modal('show');
  $('#progBar').attr('aria-valuenow', 0);
  $('#progBar').css('width', '0%');

  radioValue = $("input[name='exampleRadios']:checked").val();

  var values = $("#previous").val();
  const array = values.split("\n");
  localStorage.setItem("length", array.length);
  length = Math.pow(array.length, 2);
  const process = () => new Promise (res => {
    array.forEach((first, index) => {
      array.forEach(async (second, ins) => {
        await calculate(first, second, index);
        if (index === array.length -1 && ins === array.length - 1) {
          // console.log(result)
          console.log('Done!')
          await delay()
          localStorage.setItem("results", JSON.stringify(result));
          await prioritize()
        }
      });
    });
  })
  await process();
};

//Calculate distance
async function calculate(first, second, index) {
  await delay()
  iteration = iteration + 1
  progress = iteration/length*100
  $('#progBar').attr('aria-valuenow', progress);
  $('#progBar').css('width', `${progress}%`);
  if(radioValue == 'option1') {
    result.push(JaroWrinker(first, second))
  } else if(radioValue == 'option2') {
    result.push(LevenshteinDistance(first, second))
  } else if(radioValue == 'option3') {
    result.push(JaroWrinker(first, second))
  } else if(radioValue == 'option4'){
    result.push(JaroWrinker(first, second))
  }
  };
  
  function delay() {
    return new Promise(resolve => setTimeout(resolve, 300));
  };
  
  async function prioritize() {
    //const results = JSON.parse(localStorage.getItem("results"));
    var data = [] , arr = []
    var status = true, loop = true
    var count = 0
    var length = localStorage.getItem("length")
    
    //Converting array to matrix
    while(1) {
      if(count % length == 0) {
        if(count > 0) {
          data.push(arr)
          arr = []
          arr.push(result[count]);
          count++
        }
      }
      if (typeof result[count] === 'undefined'){
        break;
      }
      arr.push(result[count]);
      count++;
    }
    
    //Label matrix
    data.forEach((data, index) => {
      data.forEach((second, i) => {
        strMatrix.push([`T${index+1}C${i+1}`, second])
      })
    })
    
    //Sort data
    strMatrix.sort(compareSecondColumn);
    await delay()

    Swal.fire(
      'Successful!',
      'You may now download the prioritized test cases !',
      'success'
    ).then(result => {
      if(result.value) {
        $("#myModal").modal('hide');
        $('#download').prop('disabled', false);
      }
    })
  }
  
  function compareSecondColumn(a, b) {
    if (a[1] === b[1]) {
      return 0;
    }
    else {
        return (a[1] < b[1]) ? -1 : 1;
    }
  }

  function download() {
    var ws_data = [['TC ID' , 'Similarity (%)']]
    var wb = XLSX.utils.book_new();
    wb.Props = {
      Title: "String similarity",
      Subject: "Prioritized Test Cases",
      Author: "Irsyad Kamil",
      CreatedDate: new Date(2017,12,19)
    };
    wb.SheetNames.push("Test Sheet", "Fault Sheet");
    strMatrix.forEach((data, index) => {
      ws_data.push(data);  //a row with 2 columns
    })

    var ts = XLSX.utils.aoa_to_sheet(ws_data);
    var fs = XLSX.utils.aoa_to_sheet(ws_data);
    wb.Sheets["Test Sheet"] = ts;
    wb.Sheets["Fault Sheet"] = fs;
    var wbout = XLSX.write(wb, {bookType:'xlsx',  type: 'binary'});
    saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), 'test.xlsx');
  }
    
  function s2ab(s) { 
    var buf = new ArrayBuffer(s.length); //convert s to arrayBuffer
    var view = new Uint8Array(buf);  //create uint8array as viewer
    for (var i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF; //convert to octet
    return buf;    
}
  
</script>