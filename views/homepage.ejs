<% include partials/layout %>
<body>
<% include partials/header %>
<div class="container" style="padding: 50px;">
  <div class="form-group">
    <div class="row">
      <div class="col-6">
        <strong><label>STRING ALGORITHM</label></strong>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios1" value="option1">
          <label class="form-check-label" for="exampleRadios1">
            Jaro Winkler Distance
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios2" value="option2">
          <label class="form-check-label" for="exampleRadios2">
            Levenshtein Distance
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios3" value="option3">
          <label class="form-check-label" for="exampleRadios3">
            Jaccard Index
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios4" value="option4">
          <label class="form-check-label" for="exampleRadios4">
            Cosine Similarity
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios5" value="option5" checked>
          <label class="form-check-label" for="exampleRadios5">
            Enhanced Jaro Winkler
          </label>
        </div>
      </div>
      <div class="col-6">
        <strong><label>SELECTION ALGORITHM</label></strong>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios1" value="option1">
          <label class="form-check-label" for="exampleRadios1">
            GA Single Objective
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios2" value="option2">
          <label class="form-check-label" for="exampleRadios2">
            GA Multi Objective
          </label>
        </div>
      </div>
    </div>
    <br />
    <div class="row">
      <div class="col-12">
        <strong><label>TEST CASES</label></strong>
        <textarea id="previous" name="previous" rows="20" placeholder="Put your previous version of code here" style="width: 100%;"></textarea>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-6">
      <button onclick="next()" class="btn btn-primary btn-block">Process</button>
    </div>
    <div class="col-6">
      <button id="download" onclick="download()" class="btn btn-success btn-block" disabled>Download Similarity</button>
    </div>
  </div>
  <br />
  <div class="row">
    <div class="col-12">
      <strong><label>FAULTS</label></strong>
      <textarea id="faults" name="faults" rows="20" placeholder="Put fault here from all versions" style="width: 100%;"></textarea>
    </div>
  </div>
  <br />
  <div class="row">
    <div class="col-12">
      <button onclick="faults()" class="btn btn-primary btn-block">APFD</button>
    </div>
  </div>
</div>
<div id="myModal" class="modal fade">
  <div class="modal-dialog" style="position: relative; height: 100%; width: 100%;">
      <div class="modal-content" style="position:absolute; top: 50%; margin-top: -50px;">
          <div class="modal-body">
            <div class="progress">
              <div id="progBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="width: 50%"></div>
            </div>
          </div>
      </div>
  </div>
</div>
</body>

<script>
  var radioValue, progress = 0
var iteration = 0
const percent = 100
var length = 0
var result = []
var strMatrix = []

async function next() {
  $('#myModal').modal({backdrop: 'static', keyboard: false}) 
  $("#myModal").modal('show');
  $('#progBar').attr('aria-valuenow', 0);
  $('#progBar').css('width', '0%');

  radioValue = $("input[name='exampleRadios']:checked").val();

  var values = $("#previous").val();
  const array = values.split("\n");
  localStorage.setItem("length", array.length);
  length = Math.pow(array.length, 2);
  const process = () => new Promise (res => {
    array.forEach((first, index) => {
      array.forEach(async (second, ins) => {
        await calculate(first, second, index);
        if (index === array.length -1 && ins === array.length - 1) {
          // console.log(result)
          console.log('Done!')
          await delay()
          localStorage.setItem("results", JSON.stringify(result));
          await prioritize()
        }
      });
    });
  })
  await process();
};

//Calculate distance
async function calculate(first, second, index) {
  await delay()
  iteration = iteration + 1
  progress = iteration/length*100
  $('#progBar').attr('aria-valuenow', progress);
  $('#progBar').css('width', `${progress}%`);
  if(radioValue == 'option1') {
    result.push(JaroWrinker(first, second))
  } else if(radioValue == 'option2') {
    result.push(LevenshteinDistance(first, second))
  } else if(radioValue == 'option3') {
    result.push(JaroWrinker(first, second))
  } else if(radioValue == 'option4'){
    result.push(JaroWrinker(first, second))
  } else if(radioValue == 'option5'){
    result.push(EnhancedJaroWrinker(first, second))
  }
  };
  
  function delay() {
    return new Promise(resolve => setTimeout(resolve, 300));
  };
  
  async function prioritize() {
    //const results = JSON.parse(localStorage.getItem("results"));
    var data = [] , arr = []
    var status = true, loop = true
    var count = 0
    var length = localStorage.getItem("length")
    
    //Converting array to matrix
    while(1) {
      if(count % length == 0) {
        if(count > 0) {
          data.push(arr)
          arr = []
          arr.push(result[count]);
          count++
        }
      }
      if (typeof result[count] === 'undefined'){
        break;
      }
      arr.push(result[count]);
      count++;
    }
    
    //Label matrix
    data.forEach((data, index) => {
      data.forEach((second, i) => {
        strMatrix.push([`T${index+1}C${i+1}`, second])
      })
    })
    
    //Sort data
    strMatrix.sort(compareSecondColumn);
    await delay()

    Swal.fire(
      'Successful!',
      'You may now download the prioritized test cases !',
      'success'
    ).then(result => {
      if(result.value) {
        $("#myModal").modal('hide');
        $('#download').prop('disabled', false);
      }
    })
  }
  
  function compareSecondColumn(a, b) {
    if (a[1] === b[1]) {
      return 0;
    }
    else {
        return (a[1] < b[1]) ? -1 : 1;
    }
  }

  function download() {
    var ws_data = [['TC ID' , 'Similarity (%)']]
    var wb = XLSX.utils.book_new();
    wb.Props = {
      Title: "String similarity",
      Subject: "Prioritized Test Cases",
      Author: "Irsyad Kamil",
      CreatedDate: new Date(2017,12,19)
    };
    wb.SheetNames.push("Test Sheet", "Fault Sheet");
    strMatrix.forEach((data, index) => {
      ws_data.push(data);  //a row with 2 columns
    })

    var ts = XLSX.utils.aoa_to_sheet(ws_data);
    var fs = XLSX.utils.aoa_to_sheet(ws_data);
    wb.Sheets["Test Sheet"] = ts;
    wb.Sheets["Fault Sheet"] = fs;
    var wbout = XLSX.write(wb, {bookType:'xlsx',  type: 'binary'});
    saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), 'test.xlsx');
  }
    
  function s2ab(s) { 
    var buf = new ArrayBuffer(s.length); //convert s to arrayBuffer
    var view = new Uint8Array(buf);  //create uint8array as viewer
    for (var i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF; //convert to octet
    return buf;    
}

async function faults() {
  // $('#myModal').modal({backdrop: 'static', keyboard: false}) 
  // $("#myModal").modal('show');
  // $('#progBar').attr('aria-valuenow', 0);
  // $('#progBar').css('width', '0%');

  var unitest = 0, array = $("#faults").val().split(/\r\n|\r|\n/), fault_loc = [];
  console.log(array)
  for(i=0;i<array.length;i++){
    if(i==0 || !(i % 83)){
      unitest = array[i].slice(7);                        // location unitest
      fault_loc.push(unitest)
    }
  }   

  const obj = Object.assign({}, fault_loc);

  // for(i=0;i<array.length;i++) {
  //   if(i!=0 || (i % 83)) {
  //     var temp = array[i].slice(1);
  //     // fault[unitest][temp] = array[temp++]
  //     obj[i].push(array[temp++]);
  //   }
  // }    

  if(i!=0 || (i % 83)) {                                                    
    console.log(array.sort())                                  // sambung kerja dekat sini 
    }

  console.log(fault_loc)
  console.log(obj)
  // localStorage.setItem("length", array.length);
  // length = Math.pow(array.length, 2);
  // const process = () => new Promise (res => {
  //   array.forEach((first, index) => {
  //       await sort(first, second, index);
  //       if (index === array.length -1 && ins === array.length - 1) {
  //         // console.log(result)
  //         console.log('Done!')
  //         await delay()
  //         localStorage.setItem("results", JSON.stringify(result));
  //         await prioritize()
  //       }
  //   });
  // })
  // await process();
};

//Sort faults
async function sort(first, second, index) {
  await delay()
  iteration = iteration + 1
  progress = iteration/length*100
  $('#progBar').attr('aria-valuenow', progress);
  $('#progBar').css('width', `${progress}%`);
  if(radioValue == 'option1') {
    result.push(JaroWrinker(first, second))
  } else if(radioValue == 'option2') {
    result.push(LevenshteinDistance(first, second))
  } else if(radioValue == 'option3') {
    result.push(JaroWrinker(first, second))
  } else if(radioValue == 'option4'){
    result.push(JaroWrinker(first, second))
  } else if(radioValue == 'option5'){
    result.push(EnhancedJaroWrinker(first, second))
  }
  };
</script>

